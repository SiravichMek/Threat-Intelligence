# Input section to receive logs from the sender over TCP
input {
  tcp {
    port => 5045
    codec => line  # Expect logs in line format from the sender
  }
}

# Filter section to process logs and make API calls
filter {
  # Extract event_type and log entry from the incoming line
  grok {
    match => { "message" => "%{DATA:event_type}\|%{GREEDYDATA:log_entry}" }
  }

  # Process NGINX logs
  if [event_type] == "nginx_log" {

    grok {
      match => { 
        "log_entry" => "%{IPORHOST:client_ip}\|%{HTTPDATE:timestamp}\|%{WORD:method}\|%{URIPATHPARAM:request}\|%{NOTSPACE:http_version}\|%{NUMBER:status_code}\|%{NUMBER:response_size}\|%{NOTSPACE:referrer}\|%{GREEDYDATA:user_agent}"
      }
    }
     # %{method} %{request} %{status_code} %{response_size} %{referrer} %{user_agent}
    mutate {
      add_field => {
        "log" => "%{log_entry}"
      }
      remove_field => ["timestamp"]
    }

    # Make API call to predict GET request anomalies
    ruby {
      code => '
        begin
          require "net/http"
          require "uri"
          require "json"
          require "timeout"

          encoded_log = URI.encode_www_form_component(event.get("log"))
          uri = URI.parse("http://127.0.0.1:8080/predict_get?log=#{encoded_log}")

          Timeout.timeout(5) do
            response = Net::HTTP.get_response(uri)
            if response.code == "200"
              result = JSON.parse(response.body)
              event.set("prediction", result["predicted_label"])
            else
              event.tag("api_request_failed")
              event.set("error_response", response.body)
            end
          end
        rescue => e
          event.tag("api_request_failed")
          event.set("error", e.message)
        end
      '
    }
  }

  # Process MySQL logs
  if [event_type] == "mysql_log" {
    grok {
      match => { 
        "log_entry" => "%{TIMESTAMP_ISO8601:timestamp} %{GREEDYDATA:sql_query}" 
      }
    }

    mutate {
      remove_field => ["timestamp"]
      add_field => {
        "log" => "%{log_entry}"
      }
    }

    # Make API call to predict SQL injection or normal queries
    ruby {
        code => '
        begin
          require "net/http"
          require "uri"
          require "json"
          require "timeout"

          # Get the log message and ensure it\'s a string
          log_message = event.get("log").to_s

          # URL encode the log message
          encoded_log = URI.encode_www_form_component(log_message)

          # Create the full URI
          uri = URI.parse("http://127.0.0.1:8081/predict?queries=#{encoded_log}")

          Timeout.timeout(5) do
            response = Net::HTTP.get_response(uri)
            
            if response.code == "200"
 
              results = JSON.parse(response.body)
              
              if results.is_a?(Array) && !results.empty?
                result = results[0]
                event.set("prediction", result["predicted_label"])
              else
                event.tag("invalid_response_format")
                event.set("error", "Invalid response format")
              end
            else
              event.tag("api_request_failed")
              event.set("error_response", response.body)
            end
          end
        rescue Timeout::Error => e
          event.tag("request_timeout")
          event.set("error", "Request timed out: #{e.message}")
        rescue JSON::ParserError => e
          event.tag("json_parse_error")
          event.set("error", "JSON parsing failed: #{e.message}")
        rescue => e
          event.tag("api_request_failed")
          event.set("error", e.message)
        end
        '
    }
  }

  # # Process Firewall logs 
  # if [event_type] == "firewall_log" {
  #   grok {
  #     match => { 
  #       "log_entry" => "%{TIMESTAMP_ISO8601:timestamp} %{GREEDYDATA:sql_query}" 
  #     }
  #   }

  #   mutate {
  #     remove_field => ["timestamp"]
  #     add_field => {
  #       "log" => "%{log_entry}"
  #     }
  #   }

  #   # Make API call to predict SQL injection or normal queries
  #   ruby {
  #       code => '
  #       begin
  #         require "net/http"
  #         require "uri"
  #         require "json"
  #         require "timeout"

  #         # Get the log message and ensure it\'s a string
  #         log_message = event.get("log").to_s

  #         # URL encode the log message
  #         encoded_log = URI.encode_www_form_component(log_message)

  #         # Create the full URI
  #         uri = URI.parse("http://127.0.0.1:8081/predict?queries=#{encoded_log}")

  #         Timeout.timeout(5) do
  #           response = Net::HTTP.get_response(uri)
            
  #           if response.code == "200"
 
  #             results = JSON.parse(response.body)
              
  #             if results.is_a?(Array) && !results.empty?
  #               result = results[0]
  #               event.set("prediction", result["predicted_label"])
  #             else
  #               event.tag("invalid_response_format")
  #               event.set("error", "Invalid response format")
  #             end
  #           else
  #             event.tag("api_request_failed")
  #             event.set("error_response", response.body)
  #           end
  #         end
  #       rescue Timeout::Error => e
  #         event.tag("request_timeout")
  #         event.set("error", "Request timed out: #{e.message}")
  #       rescue JSON::ParserError => e
  #         event.tag("json_parse_error")
  #         event.set("error", "JSON parsing failed: #{e.message}")
  #       rescue => e
  #         event.tag("api_request_failed")
  #         event.set("error", e.message)
  #       end
  #       '
  #   }
  # }
}

# Output section to store results and handle failed API requests
output {
    file {
    path => "C:\\Users\\N0trUe\\Desktop\\Log_Data_Test\\api_response.log"
    codec => json_lines
  }

  elasticsearch {
    hosts => ["http://localhost:9200"]
    user => "elastic"
    password => "CalK2dvNUFdNg-g*hesg"
    index => "logs_index"
    pipeline => "mitre_mapping_pipeline"
  }

  # Debugging output to console
  stdout { codec => rubydebug }
}
